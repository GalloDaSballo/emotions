{"version":3,"sources":["constants/emotions.js","components/Emotions.js","App.js","serviceWorker.js","index.js"],"names":["emotionalAttitudes","_","concat","getRandomInt","min","max","Math","ceil","floor","random","Emotions","state","current","emotions","length","this","className","onClick","e","preventDefault","setState","compressor","Component","App","menu","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySA6TeA,E,OAfYC,EAAEC,OA5SX,CAClB,UACA,WACA,cACA,cACA,WACA,aACA,eACA,YACA,UACA,UACA,UACA,UACA,aACA,cACA,aACA,UACA,SACA,YACA,cACA,WACA,QACA,UACA,cACA,YACA,WACA,cACA,WACA,UACA,cACA,aACA,UACA,WACA,aACA,gBACA,YAEiB,CACf,WACA,YACA,YACA,QACA,WACA,WACA,SACA,YACA,SACA,UACA,WACA,SACA,cAEW,CACX,UACA,SACA,WACA,eACA,YACA,QACA,UACA,QACA,YACA,YACA,YACA,WACA,YACA,MACA,SACA,aACA,YACA,UACA,YACA,YACA,OACA,OACA,QACA,SACA,SACA,UACA,WACA,YAEc,CACd,UACA,aACA,YACA,YACA,WACA,YACA,UACA,OACA,SACA,UACA,SACA,UACA,QACA,SACA,SACA,UACA,UAEmB,CACnB,OACA,QACA,SACA,UACA,SACA,SACA,OACA,SACA,YACA,gBACA,aACA,OACA,OACA,YAEmB,CACnB,UACA,WACA,WACA,SACA,cACA,gBACA,YACA,UACA,YACA,WACA,aACA,WACA,SACA,SACA,YACA,aACA,gBACA,YACA,UACA,WACA,YACA,SACA,YACA,YAEqB,CACrB,QACA,SACA,UACA,UACA,WACA,WACA,QACA,UACA,WACA,cACA,WACA,WACA,UACA,YACA,WACA,YACA,WACA,aACA,eACA,WACA,YACA,WACA,cAEa,CACb,YACA,QACA,SACA,UACA,SACA,UACA,UACA,WACA,YACA,cAIgB,CAChB,SACA,QACA,UACA,UACA,YACA,WACA,SACA,SACA,aACA,YACA,WACA,WACA,WACA,UACA,aACA,QACA,QACA,QACA,WAEa,CACb,QACA,WACA,UACA,gBACA,OACA,YACA,cACA,UACA,WACA,WACA,WACA,WACA,MACA,aACA,SACA,SACA,WACA,QACA,QACA,iBAIsB,CACtB,aACA,WACA,QACA,YACA,QACA,YACA,YACA,cACA,aACA,YACA,cACA,WACA,UACA,QACA,WACA,WACA,WACA,cACA,WACA,QACA,WACA,WACA,UACA,gBACA,cACA,OACA,UACA,eACA,UACA,UACA,YAE0B,CAC1B,OACA,MACA,SACA,SACA,UACA,SACA,QACA,gBACA,aACA,aACA,SACA,WACA,UACA,aACA,YACA,WACA,WACA,UACA,cACA,UACA,eACA,cACA,aACA,aACA,YACA,YACA,SACA,aACA,UACA,UACA,YACA,YACA,YACA,OACA,YACA,UACA,oBCvSF,SAASC,EAAaC,EAAKC,GAGzB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,IAAQA,E,IAqBpCM,E,2MAjBbC,MAAQ,CACNC,QAAST,EAAa,EAAGU,EAASC,S,wEAE3B,IAAD,OACCF,EAAWG,KAAKJ,MAAhBC,QACP,OACE,yBAAKI,UAAU,WACbC,QAAS,SAACC,GAAOA,EAAEC,iBAAkB,EAAKC,SAAS,CAACR,QAAST,EAAa,EAAGU,EAASC,YAEtF,yBAAKE,UAAU,kBACb,kBAAC,IAAD,CAASK,WAAY,GAAIR,EAASD,U,GAXrBU,aCeRC,E,2MArBbZ,MAAQ,CACNa,MAAM,G,wEAEC,IAAD,OACCA,EAAQT,KAAKJ,MAAba,KACP,OACE,yBAAKR,UAAU,QACXQ,GACA,yBACER,UAAU,OACVC,QAAS,kBAAM,EAAKG,SAAS,CAACI,MAAM,MAEpC,qCAGJ,kBAAC,EAAD,W,GAhBUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.afd7269d.chunk.js","sourcesContent":["import _ from 'lodash'\n\nconst attitudes = [\n\"chiefly\",\n\"rational\",\n\"explanatory\",\n\"instructive\",\n\"didactic\",\n\"admonitory\",\n\"condemnatory\",\n\"indignant\",\n\"puzzled\",\n\"curious\",\n\"wistful\",\n\"pensive\",\n\"thoughtful\",\n\"preoccupied\",\n\"deliberate\",\n\"studied\",\n\"candid\",\n\"guileless\",\n\"thoughtless\",\n\"innocent\",\n\"frank\",\n\"sincere\",\n\"questioning\",\n\"uncertain\",\n\"doubting\",\n\"incredulous\",\n\"critical\",\n\"cynical\",\n\"insinuating\",\n\"persuading\",\n\"coaxing\",\n\"pleading\",\n\"persuasive\",\n\"argumentative\",\n\"oracular\"\n]\nconst pleasure = [\n  \"peaceful\",\n  \"satisfied\",\n  \"contented\",\n  \"happy\",\n  \"cheerful\",\n  \"pleasant\",\n  \"bright\",\n  \"sprightly\",\n  \"joyful\",\n  \"playful\",\n  \"jubilant\",\n  \"elated\",\n  \"enraptured\"\n]\nconst pain = [\n  \"Worried\",\n  \"uneasy\",\n  \"troubled\",\n  \"disappointed\",\n  \"regretful\",\n  \"vexed\",\n  \"annoyed\",\n  \"bored\",\n  \"disgusted\",\n  \"Miserable\",\n  \"cheerless\",\n  \"mournful\",\n  \"sorrowful\",\n  \"sad\",\n  \"dismal\",\n  \"melancholy\",\n  \"plaintive\",\n  \"fretful\",\n  \"querulous\",\n  \"irritable\",\n  \"sore\",\n  \"sour\",\n  \"sulky\",\n  \"sullen\",\n  \"bitter\",\n  \"crushed\",\n  \"pathetic\",\n  \"tragical\"\n]\nconst passion = [\n  \"Nervous\",\n  \"hysterical\",\n  \"impulsive\",\n  \"impetuous\",\n  \"reckless\",\n  \"desperate\",\n  \"frantic\",\n  \"wild\",\n  \"fierce\",\n  \"furious\",\n  \"savage\",\n  \"enraged\",\n  \"angry\",\n  \"hungry\",\n  \"greedy\",\n  \"jealous\",\n  \"insane\"\n]\nconst self_control = [\n  \"Calm\",\n  \"quiet\",\n  \"solemn\",\n  \"serious\",\n  \"serene\",\n  \"simple\",\n  \"mild\",\n  \"gentle\",\n  \"temperate\",\n  \"imperturbable\",\n  \"nonchalant\",\n  \"cool\",\n  \"wary\",\n  \"cautious\"\n]\nconst friendliness = [\n  \"Cordial\",\n  \"sociable\",\n  \"gracious\",\n  \"kindly\",\n  \"sympathetic\",\n  \"compassionate\",\n  \"forgiving\",\n  \"pitying\",\n  \"indulgent\",\n  \"Tolerant\",\n  \"comforting\",\n  \"soothing\",\n  \"tender\",\n  \"loving\",\n  \"caressing\",\n  \"solicitous\",\n  \"accommodating\",\n  \"approving\",\n  \"helpful\",\n  \"obliging\",\n  \"courteous\",\n  \"polite\",\n  \"confiding\",\n  \"trusting\"\n]\nconst unfriendliness = [\n  \"Sharp\",\n  \"severe\",\n  \"cutting\",\n  \"hateful\",\n  \"unsocial\",\n  \"spiteful\",\n  \"harsh\",\n  \"boorish\",\n  \"pitiless\",\n  \"disparaging\",\n  \"derisive\",\n  \"SCOrnful\",\n  \"satiric\",\n  \"sarcastic\",\n  \"insolent\",\n  \"insulting\",\n  \"impudent\",\n  \"belittling\",\n  \"contemptuous\",\n  \"accusing\",\n  \"reproving\",\n  \"scolding\",\n  \"suspicious\"\n]\nconst comedy = [\n  \"Facetious\",\n  \"comic\",\n  \"ironic\",\n  \"satiric\",\n  \"amused\",\n  \"mocking\",\n  \"playful\",\n  \"humorous\",\n  \"hilarious\",\n  \"uproarious\"\n\n\n]\nconst animation = [\n  \"Lively\",\n  \"eager\",\n  \"excited\",\n  \"earnest\",\n  \"energetic\",\n  \"vigorous\",\n  \"hearty\",\n  \"ardent\",\n  \"passionate\",\n  \"rapturous\",\n  \"ecstatic\",\n  \"feverish\",\n  \"inspired\",\n  \"exalted\",\n  \"breathless\",\n  \"hasty\",\n  \"brisk\",\n  \"crisp\",\n  \"hopeful\"\n]\nconst apathy = [\n  \"Inert\",\n  \"sluggish\",\n  \"languid\",\n  \"dispassionate\",\n  \"dull\",\n  \"colorless\",\n  \"indifferent\",\n  \"stoical\",\n  \"reserved\",\n  \"defeated\",\n  \"helpless\",\n  \"hopeless\",\n  \"dry\",\n  \"monotonous\",\n  \"Vacant\",\n  \"feeble\",\n  \"dreaming\",\n  \"bored\",\n  \"blase\",\n  \"sophisticated\"\n\n\n]\nconst self_importance = [\n  \"Impressive\",\n  \"profound\",\n  \"proud\",\n  \"dignified\",\n  \"lofty\",\n  \"imperious\",\n  \"confident\",\n  \"egotistical\",\n  \"peremptory\",\n  \"bombastic\",\n  \"sententious\",\n  \"arrogant\",\n  \"pompous\",\n  \"stiff\",\n  \"boastful\",\n  \"exultant\",\n  \"insolent\",\n  \"domineering\",\n  \"flippant\",\n  \"saucy\",\n  \"positive\",\n  \"resolute\",\n  \"haughty\",\n  \"condescending\",\n  \"challenging\",\n  \"bold\",\n  \"defiant\",\n  \"contemptuous\",\n  \"assured\",\n  \"knowing\",\n  \"cocksure\"\n]\nconst submission_timidity = [\n  \"Meek\",\n  \"shy\",\n  \"humble\",\n  \"docile\",\n  \"ashamed\",\n  \"modest\",\n  \"timid\",\n  \"unpretentious\",\n  \"respectful\",\n  \"apologetic\",\n  \"devout\",\n  \"reverent\",\n  \"servile\",\n  \"obsequious\",\n  \"groveling\",\n  \"contrite\",\n  \"obedient\",\n  \"willing\",\n  \"sycophantic\",\n  \"fawning\",\n  \"ingratiating\",\n  \"deprecatory\",\n  \"submissive\",\n  \"frightened\",\n  \"surprised\",\n  \"horrified\",\n  \"aghast\",\n  \"astonished\",\n  \"alarmed\",\n  \"fearful\",\n  \"terrified\",\n  \"trembling\",\n  \"wondering\",\n  \"awed\",\n  \"astounded\",\n  \"shocked\",\n  \"uncomprehending\"\n]\n\nconst emotionalAttitudes = _.concat(\n  attitudes,\n  pleasure,\n  pain,\n  passion,\n  self_control,\n  friendliness,\n  unfriendliness,\n  comedy,\n  animation,\n  apathy,\n  self_importance,\n  submission_timidity\n)\n\nexport default emotionalAttitudes\n","import React, {Component} from 'react'\nimport FitText from '@kennethormandy/react-fittext'\nimport emotions from '../constants/emotions'\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nclass Emotions extends Component{\n  state = {\n    current: getRandomInt(0, emotions.length)\n  }\n  render(){\n    const {current} = this.state\n    return(\n      <div className=\"Emotions\"\n        onClick={(e) => {e.preventDefault(); this.setState({current: getRandomInt(0, emotions.length)})}}\n      >\n        <div className=\"Emotions__text\">\n          <FitText compressor={1}>{emotions[current]}</FitText>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Emotions\n","import React, {Component} from 'react';\nimport './App.css';\nimport Emotions from './components/Emotions'\nclass App extends Component {\n  state = {\n    menu: true\n  }\n  render(){\n    const {menu} = this.state\n    return (\n      <div className=\"App\">\n        {!menu &&\n          <div\n            className=\"menu\"\n            onClick={() => this.setState({menu: true})}\n          >\n            <h2>Menu</h2>\n          </div>\n        }\n        <Emotions />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}